一，每个运行在计算机上的程序，都有一个“当前工作目录”，或cwd。所有没有从根文件夹开始的文件名或路径，都假定在当前工作目录下。利用os.getcwd()函数，可以取得当前工作路径的字符串，并可以利用os.chdir()改变它。
举例如下：
>>> import os
>>> os.getcwd()
'C:\\Python36'
>>> os.chdir('c:\\windows')
>>> os.getcwd()
'c:\\windows'

二，有两种方法指定一个文件路径。
? “绝对路径”，总是从根文件夹开始。
? “相对路径”，它相对于程序的当前工作目录。

三，os.makedirs()创建新文件夹。
举例：
>>> import os
>>> os.makedirs('c:\\del\\del\\del')
>>> os.chdir('c:\\del\del\\del')
>>> os.getcwd()
'c:\\del\\del\\del'

四，os.path 模块包含了许多与文件名和文件路径相关的有用函数。os.path 是os 模块中的模块，所以只要执行import os 就可以导入它。
? 调用os.path.abspath(path)将返回参数的绝对路径的字符串。这是将相对路径转换为绝对路径的简便方法。
? 调用os.path.isabs(path)，如果参数是一个绝对路径，就返回True，如果参数是一个相对路径，就返回False。
? 调用os.path.relpath(path, start)将返回从start 路径到path 的相对路径的字符串。如果没有提供start，就使用当前工作目录作为开始路径。
理解代码：
>>>import os
>>> os.path.abspath('.')
'C:\\Python36'
>>> os.path.abspath('.\\Scripts')
'C:\\Python36\\Scripts'
>>> os.path.isabs('.')
False
>>> os.path.isabs(os.path.abspath('.'))
True

五，查看文件大小和文件夹内容
一旦有办法处理文件路径，就可以开始搜集特定文件和文件夹的信息。os.path 模块提供了一些函数，用于查看文件的字节数以及给定文件夹中的文件和子文件夹。
? 调用os.path.getsize(path)将返回path 参数中文件的字节数。
? 调用os.listdir(path)将返回文件名字符串的列表，包含path 参数中的每个文件（请注意，这个函数在os模块中，而不是os.path）。

下面是我在交互式环境中尝试这些函数的结果：
>>> os.path.getsize('C:\\Windows\\System32\\calc.exe')
776192               #calc.exe 程序是776192 字节
>>> os.listdir('C:\\Windows\\System32')
['0409', '12520437.cpx', '12520850.cpx', '5U877.ax', 'aaclient.dll','xwtpdui.dll', 'xwtpw32.dll', 'zh-CN', 'zh-HK', 'zh-TW', 'zipfldr.dll']

如果想知道这个目录下所有文件的总字节数，就可以同时使用os.path.getsize()和os.listdir()。

>>> totalSize = 0
>>> for filename in os.listdir('C:\\Windows\\System32'):
totalSize = totalSize + os.path.getsize(os.path.join('C:\\Windows\\System32', filename))
>>> print(totalSize)
1117846456

当循环遍历C:\Windows\System32 文件夹中的每个文件时，totalSize 变量依次增加每个文件的字节数。请注意，我在调用os.path.getsize()时，使用了os.path.join()来连接文件夹名称和当前的文件名。os.path.getsize()返回的整数添加到otalSize 中。在循环遍历所有文件后，我打印出totalSize，看看C:\Windows\System32 文件夹的总字节数。

结合我的电脑代码：
>>> import
>>> to=0
>>> for filename in os.listdir('C:\\Windows\\System32'):
	to=to+os.path.getsize(os.path.join('c:\\windows\\system32',filename))	
>>> print(to)
1211865962

六，8.1.8 检查路径有效性
os.path 模块提
供了一些函数，用于检测给定的路径是否存在，以及它是文件还是文件夹。
? 如果path 参数所指的文件或文件夹存在，调用s.path.exists(path)将返回True，否则返回False。
? 如果path 参数存在，并且是一个文件，调用os.path.isfile(path)将返回True，否则返回False。
? 如果path 参数存在，并且是一个文件夹，调用os.path.isdir(path)将返回True，否则返回False。

下面是我在交互式环境中尝试这些函数的结果：
>>> os.path.exists('C:\\Windows')
True
>>> os.path.exists('C:\\some_made_up_folder')
False
>>> os.path.isdir('C:\\Windows\\System32')
True
>>> os.path.isfile('C:\\Windows\\System32')
False
>>> os.path.isdir('C:\\Windows\\System32\\calc.exe')
False
>>> os.path.isfile('C:\\Windows\\System32\\calc.exe')
True

利用os.path.exists()函数，可以确定DVD 或闪存盘当前是否连在计算机上。例如，如果在Windows 计算机上，我想用卷名D:\检查一个闪存盘，可以这样做：

>>> os.path.exists('D:\\')
False
不好！看起来我忘记插入闪存盘了。

七，8.2 文件读写过程
在Python 中，读写文件有3 个步骤：
1．调用open()函数，返回一个File 对象。
2．调用File 对象的read()或write()方法。
3．调用File 对象的close()方法，关闭该文件。

实践代码如下：
>>> baconFile=open('bacon.txt','w')
>>> baconFile.write('hello world:\n')
13
>>> baconFile.close()
>>> baconFile=open('bacon.txt','a')
>>> baconFile.write('Bacon is not a vegetable.')
25
>>> baconFile.close()
>>> baconFile=open('bacon.txt')
>>> content=baconFile.read()
>>> baconFile.close()
>>> print(content)
hello world:
Bacon is not a vegetable.

八，8.3 用shelve 模块保存变量

利用shelve 模块，你可以将Python 程序中的变量保存到二进制的shelf 文件中。
这样，程序就可以从硬盘中恢复变量的数据。shelve 模块让你在程序中添加“保存”和“打开”功能。例如，如果运行一个程序，并输入了一些配置设置，就可以将这些设置保存到一个shelf 文件，然后让程序下一次运行时加载它们。

在交互式环境中输入以下代码：
>>> import shelve
>>> shelf=shelve.open('mydata')  #调用函数shelve.open()并传入一个文件名，然后将返回的值保存在一个变量中。
>>> cats=['Zophie','Pooka','Simon']
>>> shelf['cats']=cats
>>> shelf.close()
>>> 
在Windows 上运行前面的代码，你会看到在当前工作目录下有3 个新文件：mydata.bak、mydata.dat 和mydata.dir。
就像字典一样，shelf 值有keys()和values()方法，返回shelf 中键和值的类似列表的值。因为这些方法返回类似列表的值，而不是真正的列表，所以应该将它们传递给list()函数，取得列表的形式。在交互式环境中输入以下代码：

>>> shelfFile = shelve.open('mydata')
>>> list(shelfFile.keys())
['cats']
>>> list(shelfFile.values())
[['Zophie', 'Pooka', 'Simon']]
>>> shelfFile.close()

创建文件时，如果你需要在Notepad 或TextEdit 这样的文本编辑器中读取它们，纯文本就非常有用。但是，如果想要保存Python 程序中的数据，那就使用shelve 模块。


九，8.4 用pprint.pformat()函数保存变量
pprint.pprint()函数将列表或字典中的内容“漂亮打印”到屏幕，而pprint.pformat()函数将返回同样的文本字符串，但不是打印它。

例如，在交互式环境中输入以下代码：
>>> import pprint  #导入PPRINT模块
>>> cats = [{'name': 'Zophie', 'desc': 'chubby'}, {'name': 'Pooka', 'desc': 'fluffy'}]
>>> pprint.pformat(cats)
"[{'desc': 'chubby', 'name': 'Zophie'}, {'desc': 'fluffy', 'name': 'Pooka'}]"
>>> fileObj = open('myCats.py', 'w')
>>> fileObj.write('cats = ' + pprint.pformat(cats) + '\n')
83
>>> fileObj.close()

import 语句导入的模块本身就是Python 脚本。如果来自pprint.pformat()的字符串保存为一个.py 文件，该文件就是一个可以导入的模块，像其他模块一样。
由于Python 脚本本身也是带有.py 文件扩展名的文本文件，所以你的Python 程序甚至可以生成其他Python 程序。然后可以将这些文件导入到脚本中。
>>> import myCats
>>> myCats.cats
[{'name': 'Zophie', 'desc': 'chubby'}, {'name': 'Pooka', 'desc': 'fluffy'}]
>>> myCats.cats[0]
{'name': 'Zophie', 'desc': 'chubby'}
>>> myCats.cats[0]['name']
'Zophie'
创建一个.py 文件（而不是利用shelve 模块保存变量）的好处在于，因为它是一个文本文件，所以任何人都可以用一个简单的文本编辑器读取和修改该文件的内容。但是，对于大多数应用，利用shelve 模块来保存数据，是将变量保存到文件的最佳方式。只有基本数据类型，诸如整型、浮点型、字符串、列表和字典，可以作
为简单文本写入一个文件。例如，File 对象就不能够编码为文本。

九，8.5 项目：生成随机的测验试卷文件
假如你是一位地理老师，班上有35 名学生，你希望进行美国各州首府的一个小测验。不妙的是，班里有几个坏蛋，你无法确信学生不会作弊。你希望随机调整问题的次序，这样每份试卷都是独一无二的，这让任何人都不能从其他人那里抄袭答案。当然，手工完成这件事又费时又无聊。好在，你懂一些Python。

下面是程序所做的事：
? 创建35 份不同的测验试卷。
? 为每份试卷创建50 个多重选择题，次序随机。
? 为每个问题提供一个正确答案和3 个随机的错误答案，次序随机。
? 将测验试卷写到35 个文本文件中。
? 将答案写到35 个文本文件中。
这意味着代码需要做下面的事：
? 将州和它们的首府保存在一个字典中。
? 针对测验文本文件和答案文本文件，调用open()、write()和close()。

十，8.6 项目：多重剪贴板

? 利用random.shuffle()随机调整问题和多重选项的次序。